// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: todos.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (user_id, description, position)
VALUES ($1, $2, 
    COALESCE((SELECT MAX(position) FROM todos WHERE user_id = $1) + 100, 100)  -- default gap of 100
)
RETURNING id, user_id, description, position, completed, created_at, updated_at
`

type CreateTodoParams struct {
	UserID      int32
	Description string
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo, arg.UserID, arg.Description)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Position,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos WHERE id = $1 AND user_id = $2
`

type DeleteTodoParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) DeleteTodo(ctx context.Context, arg DeleteTodoParams) error {
	_, err := q.db.Exec(ctx, deleteTodo, arg.ID, arg.UserID)
	return err
}

const listTodos = `-- name: ListTodos :many
SELECT id, user_id, description, position, completed, created_at, updated_at FROM todos WHERE user_id = $1 ORDER BY position
`

func (q *Queries) ListTodos(ctx context.Context, userID int32) ([]Todo, error) {
	rows, err := q.db.Query(ctx, listTodos, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.Position,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTodos = `-- name: SearchTodos :many
SELECT id, user_id, description, position, completed, created_at, updated_at
FROM todos
WHERE user_id = $1
  AND description @@ to_tsquery('english', $2)
ORDER BY position
`

type SearchTodosParams struct {
	UserID    int32
	ToTsquery string
}

func (q *Queries) SearchTodos(ctx context.Context, arg SearchTodosParams) ([]Todo, error) {
	rows, err := q.db.Query(ctx, searchTodos, arg.UserID, arg.ToTsquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.Position,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET description = $2, 
    completed = $3, 
    position = $4,
    updated_at = NOW()
WHERE id = $1 AND user_id = $5
RETURNING id, user_id, description, position, completed, created_at, updated_at
`

type UpdateTodoParams struct {
	ID          int32
	Description string
	Completed   pgtype.Bool
	Position    pgtype.Numeric
	UserID      int32
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, updateTodo,
		arg.ID,
		arg.Description,
		arg.Completed,
		arg.Position,
		arg.UserID,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Position,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTodoPosition = `-- name: UpdateTodoPosition :one
UPDATE todos 
SET position = ($3::NUMERIC + $4::NUMERIC) / 2,
    updated_at = NOW()
WHERE todos.id = $1 AND todos.user_id = $2
RETURNING id, user_id, description, position, completed, created_at, updated_at
`

type UpdateTodoPositionParams struct {
	ID      int32
	UserID  int32
	Prevpos pgtype.Numeric
	Nextpos pgtype.Numeric
}

func (q *Queries) UpdateTodoPosition(ctx context.Context, arg UpdateTodoPositionParams) (Todo, error) {
	row := q.db.QueryRow(ctx, updateTodoPosition,
		arg.ID,
		arg.UserID,
		arg.Prevpos,
		arg.Nextpos,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Position,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
