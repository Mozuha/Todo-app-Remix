// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/services.go
//
// Generated by this command:
//
//	mockgen -source internal/services/services.go -destination internal/services/_mock/services.go -package mock_services
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"
	db "todo-app/internal/db"
	services "todo-app/internal/services"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
	isgomock struct{}
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockIAuthService) Login(ctx context.Context, req services.LoginRequest, sessionID string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req, sessionID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockIAuthServiceMockRecorder) Login(ctx, req, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIAuthService)(nil).Login), ctx, req, sessionID)
}

// Register mocks base method.
func (m *MockIAuthService) Register(ctx context.Context, req services.RegisterRequest) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIAuthServiceMockRecorder) Register(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIAuthService)(nil).Register), ctx, req)
}

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
	isgomock struct{}
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockIUserService) DeleteUser(ctx context.Context, userID pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIUserServiceMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIUserService)(nil).DeleteUser), ctx, userID)
}

// UpdateUsername mocks base method.
func (m *MockIUserService) UpdateUsername(ctx context.Context, userID pgtype.UUID, req services.UpdateUsernameRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsername", ctx, userID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsername indicates an expected call of UpdateUsername.
func (mr *MockIUserServiceMockRecorder) UpdateUsername(ctx, userID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsername", reflect.TypeOf((*MockIUserService)(nil).UpdateUsername), ctx, userID, req)
}

// MockIPasswordHasher is a mock of IPasswordHasher interface.
type MockIPasswordHasher struct {
	ctrl     *gomock.Controller
	recorder *MockIPasswordHasherMockRecorder
	isgomock struct{}
}

// MockIPasswordHasherMockRecorder is the mock recorder for MockIPasswordHasher.
type MockIPasswordHasherMockRecorder struct {
	mock *MockIPasswordHasher
}

// NewMockIPasswordHasher creates a new mock instance.
func NewMockIPasswordHasher(ctrl *gomock.Controller) *MockIPasswordHasher {
	mock := &MockIPasswordHasher{ctrl: ctrl}
	mock.recorder = &MockIPasswordHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPasswordHasher) EXPECT() *MockIPasswordHasherMockRecorder {
	return m.recorder
}

// CompareHashAndPassword mocks base method.
func (m *MockIPasswordHasher) CompareHashAndPassword(hashedPassword, password []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword.
func (mr *MockIPasswordHasherMockRecorder) CompareHashAndPassword(hashedPassword, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*MockIPasswordHasher)(nil).CompareHashAndPassword), hashedPassword, password)
}

// GenerateFromPassword mocks base method.
func (m *MockIPasswordHasher) GenerateFromPassword(password []byte, cost int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFromPassword", password, cost)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateFromPassword indicates an expected call of GenerateFromPassword.
func (mr *MockIPasswordHasherMockRecorder) GenerateFromPassword(password, cost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFromPassword", reflect.TypeOf((*MockIPasswordHasher)(nil).GenerateFromPassword), password, cost)
}

// MockITokenGenerator is a mock of ITokenGenerator interface.
type MockITokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockITokenGeneratorMockRecorder
	isgomock struct{}
}

// MockITokenGeneratorMockRecorder is the mock recorder for MockITokenGenerator.
type MockITokenGeneratorMockRecorder struct {
	mock *MockITokenGenerator
}

// NewMockITokenGenerator creates a new mock instance.
func NewMockITokenGenerator(ctrl *gomock.Controller) *MockITokenGenerator {
	mock := &MockITokenGenerator{ctrl: ctrl}
	mock.recorder = &MockITokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenGenerator) EXPECT() *MockITokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockITokenGenerator) GenerateToken(userID, sessionID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userID, sessionID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockITokenGeneratorMockRecorder) GenerateToken(userID, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockITokenGenerator)(nil).GenerateToken), userID, sessionID)
}

// ValidateToken mocks base method.
func (m *MockITokenGenerator) ValidateToken(tokenString string) (*services.JWTCustomClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(*services.JWTCustomClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockITokenGeneratorMockRecorder) ValidateToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockITokenGenerator)(nil).ValidateToken), tokenString)
}
